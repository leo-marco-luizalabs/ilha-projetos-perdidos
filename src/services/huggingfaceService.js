/**
 * Servi√ßo de integra√ß√£o com Hugging Face Inference API
 * Completamente GRATUITO para uso pessoal e projetos pequenos
 * https://huggingface.co/docs/api-inference/quicktour
 */

import { HfInference } from "@huggingface/inference";

// Configura√ß√£o da API da Hugging Face
const hf = new HfInference(import.meta.env.VITE_HUGGINGFACE_API_KEY);

/**
 * Gera um resumo inteligente dos planos de a√ß√£o usando Hugging Face
 * @param {Array} plansData - Array com os dados dos planos de a√ß√£o
 * @returns {Promise<string>} - Resumo gerado pela IA
 */
export const generateActionPlanSummary = async (plansData) => {
  try {
    // Preparar o texto com os dados dos planos para resumo
    const plansText = plansData.map((plan, index) => {
      const actionText = plan.action ? `A√ß√£o: ${plan.action}` : 'A√ß√£o n√£o definida';
      const responsibleText = plan.responsible ? `Respons√°vel: ${plan.responsible}` : 'Respons√°vel n√£o definido';
      const deadlineText = plan.deadline ? `Prazo: ${plan.deadline}` : 'Prazo n√£o definido';
      
      return `Item ${index + 1} (${plan.voteCount} votos): ${plan.text}. ${actionText}. ${responsibleText}. ${deadlineText}.`;
    }).join(' ');

    const contextualText = `Retrospectiva √°gil - Planos de a√ß√£o da equipe: ${plansText}`;

    // Usar o modelo BART da Facebook para sumariza√ß√£o
    const result = await hf.summarization({
      model: "facebook/bart-large-cnn", // Modelo bem treinado para resumo
      inputs: contextualText,
      parameters: { 
        max_length: 150,  // M√°ximo 150 tokens para o resumo
        min_length: 50,   // M√≠nimo 50 tokens
        do_sample: false  // Usar greedy decoding para consist√™ncia
      }
    });

    if (!result || !result.summary_text) {
      throw new Error('Resposta inv√°lida da API Hugging Face.');
    }

    // Adicionar contexto ao resumo gerado
    const summary = result.summary_text.trim();
    const contextualSummary = `üìã Resumo Inteligente dos Planos de A√ß√£o:\n\n${summary}\n\nüí° Resumo gerado automaticamente com base nos ${plansData.length} planos de a√ß√£o mais votados da retrospectiva.`;

    return contextualSummary;

  } catch (error) {
    console.error('Erro ao gerar resumo com Hugging Face:', error);
    
    if (error.message.includes('401') || error.message.includes('unauthorized')) {
      throw new Error('Token da API do Hugging Face inv√°lido. Verifique sua configura√ß√£o.');
    } else if (error.message.includes('429') || error.message.includes('rate limit')) {
      throw new Error('Limite de requisi√ß√µes excedido. Tente novamente em alguns minutos.');
    } else if (error.message.includes('503') || error.message.includes('loading')) {
      throw new Error('Modelo est√° carregando. Tente novamente em 1-2 minutos.');
    } else if (error.message.includes('API')) {
      throw error; // Re-throw API specific errors
    } else {
      throw new Error('Erro ao conectar com a API do Hugging Face. Verifique sua conex√£o.');
    }
  }
};

/**
 * Verifica se o token do Hugging Face est√° configurado
 * @returns {boolean}
 */
export const isHuggingFaceConfigured = () => {
  return !!import.meta.env.VITE_HUGGINGFACE_API_KEY;
};

// Manter compatibilidade com c√≥digo existente
export const isOpenAIConfigured = isHuggingFaceConfigured;
